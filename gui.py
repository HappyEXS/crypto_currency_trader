# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QMessageBox, QInputDialog

class Ui_MainWindow(object):
    def __init__(self, account, market):
        super(Ui_MainWindow, self).__init__()
        self._account = account
        self._market = market

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 670)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(900, 670))
        MainWindow.setMaximumSize(QtCore.QSize(900, 670))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 901, 681))
        font = QtGui.QFont()
        font.setFamily("Sitka")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.frame.setFont(font)
        self.frame.setMouseTracking(False)
        self.frame.setStyleSheet("background-color: rgb(216, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        #=================================================================
        self.setupLines()
        self.setupStaticLabels()
        self.setupActiveLabels()
        self.setupButtons()
        self.setupBotButtons()
        self.setupInputs()
        self.setupTableWallet()
        self.setupTableMarket()

        #=================================================================
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setupStaticLabels(self):
        self.label_deposit = QtWidgets.QLabel(self.frame)
        self.label_deposit.setGeometry(QtCore.QRect(580, 50, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_deposit.setFont(font)
        self.label_deposit.setObjectName("label_deposit")
        self.label_resources = QtWidgets.QLabel(self.frame)
        self.label_resources.setGeometry(QtCore.QRect(740, 240, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_resources.setFont(font)
        self.label_resources.setObjectName("label_resources")
        self.label_funds = QtWidgets.QLabel(self.frame)
        self.label_funds.setGeometry(QtCore.QRect(740, 580, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_funds.setFont(font)
        self.label_funds.setObjectName("label_funds")
        self.label_wallet = QtWidgets.QLabel(self.frame)
        self.label_wallet.setGeometry(QtCore.QRect(30, 100, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_wallet.setFont(font)
        self.label_wallet.setObjectName("label_wallet")
        self.label_market = QtWidgets.QLabel(self.frame)
        self.label_market.setGeometry(QtCore.QRect(30, 320, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_market.setFont(font)
        self.label_market.setObjectName("label_market")

    def setupActiveLabels(self):
        self.label_balance = QtWidgets.QLabel(self.frame)
        self.label_balance.setGeometry(QtCore.QRect(10, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_balance.setFont(font)
        self.label_balance.setStyleSheet("")
        self.label_balance.setObjectName("label_balance")
        self.label_invested = QtWidgets.QLabel(self.frame)
        self.label_invested.setGeometry(QtCore.QRect(10, 50, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_invested.setFont(font)
        self.label_invested.setStyleSheet("")
        self.label_invested.setObjectName("label_invested")
        self.label_username = QtWidgets.QLabel(self.frame)
        self.label_username.setGeometry(QtCore.QRect(580, 10, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_username.setFont(font)
        self.label_username.setObjectName("label_username")
        self.label_recources_value = QtWidgets.QLabel(self.frame)
        self.label_recources_value.setGeometry(QtCore.QRect(740, 270, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(12)
        self.label_recources_value.setFont(font)
        self.label_recources_value.setObjectName("label_recources_value")
        self.label_funds_value = QtWidgets.QLabel(self.frame)
        self.label_funds_value.setGeometry(QtCore.QRect(740, 610, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(12)
        self.label_funds_value.setFont(font)
        self.label_funds_value.setObjectName("label_funds_value")

    def setupButtons(self):
        self.button_deposit = QtWidgets.QPushButton(self.frame)
        self.button_deposit.setGeometry(QtCore.QRect(790, 50, 91, 31))
        self.button_deposit.setStyleSheet("background-color: rgb(205, 209, 255);")
        self.button_deposit.setObjectName("button_deposit")
        self.button_deposit.clicked.connect(self.deposit)
        self.button_buy = QtWidgets.QPushButton(self.frame)
        self.button_buy.setGeometry(QtCore.QRect(740, 350, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.button_buy.setFont(font)
        self.button_buy.setStyleSheet("background-color: rgb(102, 209, 255);")
        self.button_buy.setObjectName("button_buy")
        self.button_buy.clicked.connect(self.buy)
        self.button_sell = QtWidgets.QPushButton(self.frame)
        self.button_sell.setGeometry(QtCore.QRect(740, 130, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.button_sell.setFont(font)
        self.button_sell.setStyleSheet("background-color: rgb(102, 209, 255);")
        self.button_sell.setObjectName("button_sell")
        self.button_sell.clicked.connect(self.sell)

    def setupBotButtons(self):
        self.button_bot = QtWidgets.QPushButton(self.frame)
        self.button_bot.setGeometry(QtCore.QRect(260, 10, 131, 71))
        self.button_bot.setStyleSheet("background-color: rgb(152, 168, 255);")
        self.button_bot.setObjectName("button_bot")
        self.button_bot_options = QtWidgets.QPushButton(self.frame)
        self.button_bot_options.setGeometry(QtCore.QRect(400, 10, 151, 31))
        self.button_bot_options.setStyleSheet("background-color: rgb(149, 201, 255);")
        self.button_bot_options.setObjectName("button_bot_options")
        self.button_bot_statistics = QtWidgets.QPushButton(self.frame)
        self.button_bot_statistics.setGeometry(QtCore.QRect(400, 50, 151, 31))
        self.button_bot_statistics.setStyleSheet("background-color: rgb(153, 199, 255);")
        self.button_bot_statistics.setObjectName("button_bot_statistics")

    def setupInputs(self):
        self.input_deposit = QtWidgets.QLineEdit(self.frame)
        self.input_deposit.setGeometry(QtCore.QRect(660, 50, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        self.input_deposit.setFont(font)
        self.input_deposit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.input_deposit.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.input_deposit.setMaxLength(12)
        self.input_deposit.setFrame(True)
        self.input_deposit.setObjectName("input_deposit")

    def setupLines(self):
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(0, 90, 901, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(0, 310, 901, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(560, 0, 16, 96))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.frame)
        self.line_4.setGeometry(QtCore.QRect(240, 0, 16, 96))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")

    def setupTableWallet(self):
        self.table_wallet = QtWidgets.QTableWidget(self.frame)
        self.table_wallet.setGeometry(QtCore.QRect(30, 130, 701, 171))
        self.table_wallet.setStyleSheet("background-color: rgb(255, 241, 234);")
        self.table_wallet.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_wallet.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_wallet.setObjectName("table_wallet")
        self.table_wallet.setColumnCount(7)
        self.table_wallet.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_wallet.setHorizontalHeaderItem(6, item)
        self.table_wallet.horizontalHeader().setDefaultSectionSize(95)
        self.table_wallet.horizontalHeader().setSortIndicatorShown(False)
        self.table_wallet.horizontalHeader().setStretchLastSection(True)
        self.table_wallet.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_wallet.verticalHeader().setVisible(False)
        self.table_wallet.verticalHeader().setMinimumSectionSize(23)

    def setupTableMarket(self):
        self.table_market = QtWidgets.QTableWidget(self.frame)
        self.table_market.setGeometry(QtCore.QRect(30, 350, 701, 291))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table_market.sizePolicy().hasHeightForWidth())
        self.table_market.setSizePolicy(sizePolicy)
        self.table_market.setStyleSheet("background-color: rgb(255, 241, 234);")
        self.table_market.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_market.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_market.setObjectName("table_market")
        self.table_market.setColumnCount(7)
        self.table_market.setRowCount(9)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_market.setHorizontalHeaderItem(6, item)
        self.table_market.horizontalHeader().setDefaultSectionSize(95)
        self.table_market.horizontalHeader().setSortIndicatorShown(True)
        self.table_market.horizontalHeader().setStretchLastSection(True)
        self.table_market.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_market.verticalHeader().setVisible(False)
        self.table_market.verticalHeader().setMinimumSectionSize(23)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_balance.setText(_translate("MainWindow", "Account balance: $1 053 738.06"))
        self.label_invested.setText(_translate("MainWindow", "Invested money: $10 000.00"))
        self.button_bot.setText(_translate("MainWindow", "Run bot"))
        self.label_deposit.setText(_translate("MainWindow", "Deposit cash"))
        self.button_deposit.setText(_translate("MainWindow", "Deposit"))
        self.button_buy.setText(_translate("MainWindow", "Buy Currency"))
        self.button_sell.setText(_translate("MainWindow", "Sell Currency"))
        item = self.table_wallet.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Name"))
        item = self.table_wallet.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Purchase price"))
        item = self.table_wallet.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Increse [%]"))
        item = self.table_wallet.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Quantity"))
        item = self.table_wallet.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Current price"))
        item = self.table_wallet.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Value"))
        item = self.table_wallet.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Profit"))
        self.label_wallet.setText(_translate("MainWindow", "Crypto Wallet"))
        item = self.table_market.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Name"))
        item = self.table_market.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Price"))
        item = self.table_market.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Change [%]"))
        item = self.table_market.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Volume"))
        item = self.table_market.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "7d"))
        item = self.table_market.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "30d"))
        item = self.table_market.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Graph"))
        self.label_market.setText(_translate("MainWindow", "Crypto Market"))
        self.label_username.setText(_translate("MainWindow", "Account username: \"Username\""))
        self.label_resources.setText(_translate("MainWindow", "Resources in wallet"))
        self.label_recources_value.setText(_translate("MainWindow", "$6056.77"))
        self.label_funds.setText(_translate("MainWindow", "Available funds"))
        self.label_funds_value.setText(_translate("MainWindow", "$4843.23"))
        self.button_bot_options.setText(_translate("MainWindow", "Bot options"))
        self.button_bot_statistics.setText(_translate("MainWindow", "Bot statistics"))
        self.updateLabels()
        self.updateMarket()
        self.updateWallet()

    def updateLabels(self):
        self.label_balance.setText(f"Account balance: ${self._account.getBalance()}")
        self.label_invested.setText(f"Invested money: ${self._account.getInvested()}")
        self.label_username.setText(f"Account username: \"{self._account.getUsername()}\"")
        self.label_recources_value.setText(f"${self._account.getWalletValue()}")
        self.label_funds_value.setText(f"${self._account.getFunds()}")

    def fortmatToBillions(self, value):
        return round(float(value) / 1000000000, 2)

    def formatPrice(self, value):
        value = float(value)
        if value > 9999: return round(value, 2)
        elif value > 999: return round(value, 3)
        elif value > 99: return round(value, 4)
        elif value > 9: return round(value, 5)
        else: return round(value, 6)

    def updateMarket(self):
        i = 0
        for currency in self._market.getMarket():
            self.table_market.setItem(i, 0, QTableWidgetItem(currency["id"]))
            self.table_market.setItem(i, 1, QTableWidgetItem(f'${self.formatPrice(currency["price"])}'))
            if currency["1d"] > 0: color = QtGui.QColor('green')
            else: color = QtGui.QColor('red')
            item = QTableWidgetItem(f'{currency["1d"]}%')
            item.setForeground(color)
            self.table_market.setItem(i, 2, item)
            self.table_market.setItem(i, 3, QTableWidgetItem(f'${self.fortmatToBillions(currency["volume"])}B'))
            self.table_market.setItem(i, 4, QTableWidgetItem(f'{currency["7d"]}%'))
            self.table_market.setItem(i, 5, QTableWidgetItem(f'{currency["30d"]}%'))
            self.button_graph = QtWidgets.QPushButton(self.centralwidget)
            self.button_graph.setText("Graph")
            self.table_market.setCellWidget(i, 6, self.button_graph)
            i += 1

    def updateWallet(self):
        i = 0
        for currency in self._account.getWallet():
            self.table_wallet.setItem(i, 0, QTableWidgetItem(currency["name"]))
            self.table_wallet.setItem(i, 1, QTableWidgetItem(f'${self.formatPrice(currency["price"])}'))
            increse = (currency["currentPrice"] - currency["price"])* 100 / currency["price"]
            if increse > 0: color = QtGui.QColor('green')
            else: color = QtGui.QColor('red')
            item = QTableWidgetItem(f'{round(increse, 2)}%')
            item.setForeground(color)
            self.table_wallet.setItem(i, 2, item)
            self.table_wallet.setItem(i, 3, QTableWidgetItem(f'{currency["quantity"]}'))
            self.table_wallet.setItem(i, 4, QTableWidgetItem(f'${self.formatPrice(currency["currentPrice"])}'))
            self.table_wallet.setItem(i, 5, QTableWidgetItem(f'${self.formatPrice(currency["value"])}'))
            profit = currency["value"] - (currency["price"]*currency["quantity"])
            item = QTableWidgetItem(f'${self.formatPrice(profit)}')
            item.setForeground(color)
            self.table_wallet.setItem(i, 6, item)
            i += 1

    def update(self):
        self._market.update()
        self._account.updatePrices(self._market.getLivePrices())
        self._account.updateWalletValue()
        self._account.updateBallance()
        self.updateWallet()
        self.updateMarket()
        self.updateLabels()

    def deposit(self):
        try:
            dep_value = float(self.input_deposit.displayText())
            self._account.addInvested(dep_value)
            self.updateLabels()
        except Exception:
            self.showDepositPopup()

    def showDepositPopup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Incorrect Deposit Value")
        msg.setText("Do not use characters other than numbers!")
        x = msg.exec_()

    def buy(self):
        currency_id, done1 = QtWidgets.QInputDialog.getItem(
            self.centralwidget, 'Buy currency', 'Currency you want to buy', self._market._currencies_list)
        quantity, done2 = QtWidgets.QInputDialog.getInt(
            self.centralwidget, 'Buy currency', 'Enter the quantity you want to buy')
        if done1 and done2:
            if currency_id not in self._market._currencies_list:
                self.showBuySellIDPopup()
            else:
                livePrice = float(self._market.getLivePrices()[currency_id])
                if quantity < 1 or (quantity * livePrice) > self._account.getFunds():
                    self.showBuySellQuantityPopup()
                else:
                    self._account.buyCurrency(currency_id, livePrice, quantity)
                    self.showBuySellSuccesPopup("bought", currency_id, quantity)
                    self.update()

    def sell(self):
        currencies_in_wallet = [curr["name"] for curr in self._account.getWallet()]
        currency_id, done1 = QtWidgets.QInputDialog.getItem(
            self.centralwidget, 'Sell currency', 'Currency you want to sell', currencies_in_wallet)
        quantity, done2 = QtWidgets.QInputDialog.getInt(
            self.centralwidget, 'Sell currency', 'Enter the quantity you want to sell')
        if done1 and done2:
            if currency_id not in currencies_in_wallet:
                self.showBuySellIDPopup()
            else:
                for curr in self._account.getWallet():
                    if curr["name"] == currency_id:
                        currency = curr
                if quantity < 1 or quantity > currency["quantity"]:
                    self.showBuySellQuantityPopup()
                else:
                    self._account.sellCurrency(currency_id, quantity)
                    self.showBuySellSuccesPopup("sold", currency_id, quantity)
                    self.update()

    def showBuySellIDPopup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Incorrect Currency ID")
        msg.setText("Chose ID from the provided list!")
        x = msg.exec_()

    def showBuySellQuantityPopup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Incorrect Quantity of currency")
        msg.setText("Check the amount You want to purchase/sell!")
        x = msg.exec_()

    def showBuySellSuccesPopup(self, transaction_type, name, quantity):
        msg = QMessageBox()
        msg.setWindowTitle("Transaction completed")
        msg.setText(f"You have {transaction_type} {quantity} of {name}")
        x = msg.exec_()